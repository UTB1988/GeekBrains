

print()
print('--- --- Task 1 --- ---')
print()
# Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

print()
print('--- Ver. 1 - Моя ---')
print()

"""
БИЗЕНС-ТРЕБОВАНИЯ:
- Должна быть возможность делить одно число на второе без ввода оператора деления, а просто введя две цифры

ФУНКЦИОНАЛЬНЫЕ ТРЕБОВАНИЯ:
- t1_fr1 - Должна быть реализована возможность ввода двух значений пользователем
- t1_fr2 - Должен быть реализован вызов функции (см. следующий пункт)
- t1_fr3 - Должна быть реализована функция принимающая 2 значения, введённые пользователем,
            и возвращающее частное от деления
- t1_fr4 - Функция должна проверять введёные значения пользователем на следующие ограничения:
            - Делитель не должен равняться 0,
                иначе функция должна возвращать сообщение: "Нельзя делить на ноль!"
            - Делитель не должен быть меньше 0,
                иначе функция должна возвращать сообщение: "Делитель меньше нуля!"
            - Делитель не должен иметь тип числа с плавающей запятой,
                иначе функция должна возвращать сообщение: "Делитель должен быть целым числом!"
            - При возникновении любой другой ошибки функция должна возвращать сообщение: "Другая ошибка"

ПРОЦЕСС:
- t1_fr1
    - t1_s1 - Пользователь вводит делимое
    - t1_s2 - Пользователь вводит делитель
- t1_fr2
    - t1_s3 - Вызывается именная функция
- t1_fr3
    - t1_s4 - Функция проверяет введённые пользователем значения на соответствие ограничениям
        - t1_fr4
            - t1_s41 - Если делитель == 0, то функция возвращает "Нельзя делить на ноль!"
            - t1_s42 - Если делитель < 0, то функция возвращает "Делитель меньше нуля!"
            - t1_s43 - Если тип делителя == float, то функция возвращает "Делитель должен быть целым числом!"
            - t1_s44 - Если иная ошибка, то функция возвращает "Другая ошибка"
    - t1_s5 - Функция производит деление
    - t1_s6 - Функция возвращает частное
"""


def task_1(arg_x, arg_y):
    # t1_s5
    try:
        z = divmod(arg_x, arg_y)
    # t1_s41
    except ZeroDivisionError:
        print('Нельзя делить на ноль!')
    # t1_s44
    except:
        print('Другая ошибка')
    else:
        # t1_s42
        if arg_y < 0:
            raise ValueError('Делитель меньше нуля!')
        # t1_s43
        if type(arg_y) == float:
            raise TypeError('Делитель должен быть целым числом!')
        # t1_s6
        return z[0]
    finally:
        print('finally')


# t1_s1
# x = input('Введите делимое : ')
x = 10

# t1_s2
# y = input('Введите делитель : ')
y = 2

# t1_s3
print(task_1(x, y))

print()
print('---------------------------------------------------------------------')

print()
print('--- --- Task 2 --- ---')
print()
# Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

print()
print('--- Ver. 1 - Моя ---')
print()

def task_2(birth_year, city, first_name, email, last_name, phone):
    print(birth_year, city, first_name, email, last_name, phone)

task_2(
    first_name='Alex',
    last_name='Jefferson',
    birth_year=1980,
    city='Moscow',
    email='123@mail.ru',
    phone='+7-999-111-22-33'
)

print()
print('---------------------------------------------------------------------')

print()
print('--- --- Task 3 --- ---')
print()
# Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.

print()
print('--- Ver. 1 - Моя ---')
print()

def task_3(a, b, c):
    temp_var = a, b, c
    print(type(temp_var))
    print(sum(sorted(temp_var, reverse=True)[:2]))

task_3(65, 12, 35)

print()
print('---------------------------------------------------------------------')

print()
print('--- --- Task 4 --- ---')
print()
# Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y.
# Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.

# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

print()
print('--- Ver. 1 - Моя ---')
print()

import random

def task_41(x, y):
    print(f'task_41.**   :  - {x**y}')
    print(f'task_41.pow():  - {pow(x, y)}')

def task_42(x, y):
    if type(x) != float or x <= 0 or x >= 1:
        return 'x должен быть действительным положительным числом'
    elif type(y) != int or y >= 0:
        return 'y должно быть целым отрицательным числом'
    elif y == 0:
        return 1
    return x * task_42(x, y - 1)

def task_43(x, y):
    def task_43_Iter(counter, product):
        if counter == 0:
            return product
        return task_43_Iter(counter - 1, x * product)
    return task_43_Iter(y, 1)

def task_44(x, y):
    def even(y): # проверка четности
        if y % 2 == 0:
            return 1
        return 0
    if y == 0:
        return 1
    if even(y):
        return task_44(x, y / 2) ** 2
    return x * task_44(x, y - 1)

# a = random.random()
# b = random.randint(-100, -1)
a = 0.5
b = -2
# a = 2
# b = 3
print('a:', a)
print('b:', b)
print('')

task_41(a, b)

print('')
print('-' * 10, 'СЛЕДУЮЩИЕ АЛГОРИТМЫ ВЗЯТЫ ИЗ ИНТЕРНЕТА', '-' * 10)
# https://py-algorithm.blogspot.com/2011/04/blog-post_7666.html
print('')

# print(f'task_42: {task_42(a, b)}')
# print(f'task_43: {task_43(a, b)}')
# print(f'task_44: {task_44(a, b)}')

print()
print('---------------------------------------------------------------------')

print()
print('--- --- Task 5 --- ---')
print()
# Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел, то
# вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

print()
print('--- Ver. 1 - Моя ---')
print()

task_5_str = ''
task_5_list = []

while True:
    # message = int(input('МЕНЮ: \n'
    #                 '1. Ввести число \n'
    #                 '2. Выйти \n'))
    # message = 1
    message = 2
    if message == 1:
        numbers_str = str(input('Введите числа через пробел: '))
        # numbers_str = '1 2 3 4 5 6'
        # print(f'Введённые числа: {numbers_str}')

        numbers_int = list(numbers_str.split(' '))
        for x in numbers_int:
            task_5_list.append(int(x))
        print(f'Сумма всех введённых чисел: {sum(task_5_list)}')

        if task_5_str == '':
            task_5_str = numbers_str
        else:
            task_5_str = f'{task_5_str} {numbers_str}'
        print(f'Строка: {task_5_str} \n')
    else:
        print('Программа закрыта')
        break

print()
print('---------------------------------------------------------------------')

print()
print('--- --- Task 6 --- ---')
print()
# Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и
# возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.

# Продолжить работу над заданием.
# В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре.
# Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

print()
print('--- Ver. 1 - Моя ---')
print()

def task_6_str(string):
    print(string.title())

task_6_str('lorem ipsum dolor sit amet, consectetur adipiscing elit, '
           'sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.')